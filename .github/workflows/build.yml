name: Build Snake Game

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: build-snake-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PACKAGE_NAME: snake-game

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']   # ubuntu-24.04 no contiene 3.15 en el manifest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        check-latest: true
        allow-prereleases: true
        update-environment: true

    - name: Restore pip / pyinstaller cache (cross-platform)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pyinstaller
          ${{ runner.temp }}\pip-cache
          C:\Users\runneradmin\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install build dependencies (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
        python -m pip install pyinstaller

    - name: Install build dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if (Test-Path requirements.txt) {
          python -m pip install -r requirements.txt
        }
        python -m pip install pyinstaller

    - name: Verify entrypoint (main.py) ‚Äî Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if [ -f "main.py" ]; then
          echo "‚úÖ main.py found"
        else
          echo "‚ùå main.py not found ‚Äî aborting"
          echo "Files in repo root:"
          ls -la
          exit 1
        fi

    - name: Verify entrypoint (main.py) ‚Äî Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Test-Path "main.py") {
          Write-Host "‚úÖ main.py found"
        } else {
          Write-Error "‚ùå main.py not found ‚Äî aborting"
          Get-ChildItem -Force -Recurse -Depth 1 | Format-Table
          exit 1
        }

    - name: Build (Linux / macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p build dist
        pyinstaller --noconfirm --clean --onefile --name "${PACKAGE_NAME}" main.py --distpath dist --workpath build/.pyinstaller --specpath build

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path build,dist | Out-Null
        pyinstaller --noconfirm --clean --onefile --name "$env:PACKAGE_NAME" main.py --distpath dist --workpath build/.pyinstaller --specpath build

    - name: Verify build output (OS-aware)
      shell: bash
      run: |
        echo "üìä Build verification"
        ls -la dist || true

        if [ "${RUNNER_OS}" = "Windows" ]; then
          powershell -Command "
            \$exes = Get-ChildItem -Path dist -Filter *.exe -File -ErrorAction SilentlyContinue
            if (-not \$exes) { Write-Error 'No .exe found in dist/'; exit 1 }
            foreach (\$e in \$exes) { Write-Host \"‚úÖ \$($e.Name) - \$($e.Length) bytes\" }
          "
        else
          if ls dist/* 1> /dev/null 2>&1; then
            for f in dist/*; do
              if [ -f \"$f\" ]; then
                size=$(stat -c%s \"$f\" 2>/dev/null || stat -f%z \"$f\" 2>/dev/null || echo "unknown")
                echo "‚úÖ $f ($size bytes)"
              fi
            done
          else
            echo "‚ùå No build artifacts in dist/"
            exit 1
          fi
        fi

    - name: Create archive of dist (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p artifacts
        ZIP_NAME="artifacts/${PACKAGE_NAME}-${{ matrix.os }}-py${{ matrix.python-version }}.zip"
        zip -r "$ZIP_NAME" dist || ( echo "zip failed, trying tar.gz"; tar -czf "${ZIP_NAME%.zip}.tar.gz" dist && exit 0 )
        echo "Created $ZIP_NAME"

    - name: Create archive of dist (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path artifacts | Out-Null
        $zip = "artifacts/${env:PACKAGE_NAME}-${{ matrix.os }}-py${{ matrix.python-version }}.zip"
        Compress-Archive -Path dist\* -DestinationPath $zip -Force
        Write-Host "Created $zip"

    - name: Upload build artifacts (full folders + zipped executable)
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/**
          build/**
          artifacts/**
        retention-days: 30
        if-no-files-found: error

    - name: Upload executable only
      uses: actions/upload-artifact@v4
      with:
        name: snake-executable-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/**
        retention-days: 30
        if-no-files-found: error
