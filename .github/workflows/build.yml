name: Build Snake Game

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: build-snake-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PACKAGE_NAME: snake-game

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.15']

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        check-latest: true
        allow-prereleases: true

    - name: Restore pip / pyinstaller cache (cross-platform)
      uses: actions/cache@v3
      with:
        # intent: cache common pip cache locations for linux/mac/windows
        path: |
          ~/.cache/pip
          ~/.cache/pyinstaller
          ${{ runner.temp }}\pip-cache
          C:\Users\runneradmin\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system deps and UPX (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl zip
        upx --version

    - name: Install UPX (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install upx zip
        upx --version

    - name: Install UPX (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install upx -y || echo "choco install failed, trying direct download..."
        if (-not (Get-Command upx -ErrorAction SilentlyContinue)) {
          Write-Host "Downloading UPX release..."
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip" -OutFile "upx.zip"
          Expand-Archive -Path "upx.zip" -DestinationPath "upx"
          Copy-Item -Path "upx\upx-4.2.1-win64\upx.exe" -Destination "upx.exe" -Force
          $env:PATH = "$PWD;$env:PATH"
        }
        & upx --version

    - name: Install build dependencies (pip)
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
        python -m pip install pyinstaller
      shell: bash

    - name: (Optional) Run tests if present
      if: ${{ always() && (contains(github.event.head_commit.message, '[run tests]') || false) }}
      run: |
        if [ -f pytest.ini ] || [ -d tests ]; then
          python -m pip install pytest
          pytest -q
        else
          echo "No tests detected, skipping."
        fi
      shell: bash

    - name: Verify entrypoint (main.py)
      run: |
        if [ -f "main.py" ]; then
          echo "‚úÖ main.py found"
        else
          echo "‚ùå main.py not found ‚Äî aborting"
          echo "Files in repo root:"
          ls -la
          exit 1
        fi
      shell: bash

    # --- Build with PyInstaller: split by OS to control shell/paths ---
    - name: Build (Linux / macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p build dist
        echo "üî® PyInstaller: building ${PACKAGE_NAME}"
        # A√±ade assets si los tienes: --add-data "assets:assets"  (linux/mac uses ':')
        pyinstaller --noconfirm --clean --onefile --name "${PACKAGE_NAME}" main.py --distpath dist --workpath build/.pyinstaller --specpath build
        echo "‚úÖ pyinstaller exit code: $?"
      shell: bash

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path build,dist | Out-Null
        Write-Host "üî® PyInstaller (Windows) building $env:PACKAGE_NAME"
        pyinstaller --noconfirm --clean --onefile --name "$env:PACKAGE_NAME" main.py --distpath dist --workpath build/.pyinstaller --specpath build
        Write-Host "‚úÖ PyInstaller finished. Checking dist\"

    - name: Strip / UPX compress (if UPX available)
      run: |
        # Try compressing any single-file binaries found in dist/
        set -e
        for f in dist/*; do
          if [ -f "$f" ]; then
            echo "Found build artifact: $f"
            # make executable (mostly Linux/mac)
            chmod +x "$f" || true
            if command -v upx >/dev/null 2>&1; then
              echo "Compressing $f with upx"
              upx --best --lzma "$f" || echo "upx failed for $f"
            else
              echo "UPX not available, skipping compression"
            fi
          fi
        done
      shell: bash

    - name: Verify build output (OS-aware)
      run: |
        echo "üìä Build verification"
        ls -la dist || true

        if [ "${RUNNER_OS}" = "Windows" ]; then
          powershell -Command "
            \$exes = Get-ChildItem -Path dist -Filter *.exe -File -ErrorAction SilentlyContinue
            if (-not \$exes) { Write-Error 'No .exe found in dist/'; exit 1 }
            foreach (\$e in \$exes) { Write-Host \"‚úÖ \$($e.Name) - \$($e.Length) bytes\" }
          "
        else
          if ls dist/* 1> /dev/null 2>&1; then
            for f in dist/*; do
              if [ -f "$f" ]; then
                size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo "unknown")
                echo "‚úÖ $f ($size bytes)"
              fi
            done
          else
            echo "‚ùå No build artifacts in dist/"
            exit 1
          fi
        fi
      shell: bash

    - name: Create zip of dist for artifact upload
      run: |
        mkdir -p artifacts
        ZIP_NAME="artifacts/${PACKAGE_NAME}-${{ matrix.os }}-py${{ matrix.python-version }}.zip"
        if [ "${RUNNER_OS}" = "Windows" ]; then
          powershell -Command "Compress-Archive -Path dist\\* -DestinationPath $env:ZIP_NAME -Force"
        else
          zip -r "$ZIP_NAME" dist || ( echo "zip failed, trying tar.gz"; tar -czf "${ZIP_NAME%.zip}.tar.gz" dist && exit 0 )
        fi
        echo "Created $ZIP_NAME"
      shell: bash

    - name: Upload build artifacts (full folders + zipped executable)
      uses: actions/upload-artifact@v3
      with:
        name: snake-game-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/
          build/
          artifacts/
        retention-days: 30
