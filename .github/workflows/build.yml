name: Build Snake Game

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: build-snake-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PACKAGE_NAME: snake-game

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']   # uso 3.12 porque ubuntu-24.04 no tiene 3.15 en el manifest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        check-latest: true
        allow-prereleases: true
        update-environment: true

    - name: Restore pip / pyinstaller cache (cross-platform)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pyinstaller
          ${{ runner.temp }}\pip-cache
          C:\Users\runneradmin\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    # ------------------------
    # UPX install: Linux
    # ------------------------
    - name: Install system deps and UPX (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl zip
        upx --version || true

    # ------------------------
    # UPX install: macOS
    # ------------------------
    - name: Install UPX (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew update
        brew install upx zip || true
        upx --version || true

    # ------------------------
    # UPX install: Windows (robusto, con fallback)
    # ------------------------
    - name: Install UPX (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "‚ñ∫ Instalando UPX en Windows..."

        $chocoOk = $false
        if (Get-Command choco -ErrorAction SilentlyContinue) {
          Write-Host "Chocolatey detectado. Intentando instalar upx..."
          & choco install upx -y
          $chocoOk = ($LASTEXITCODE -eq 0)
          if (-not $chocoOk) {
            Write-Warning "choco install devolvi√≥ c√≥digo $LASTEXITCODE. Haremos descarga directa."
          }
        } else {
          Write-Warning "Chocolatey no encontrado; se intentar√° descarga directa."
        }

        if (-not $chocoOk) {
          Write-Host "Descargando UPX v4.2.1..."
          $zip = "upx.zip"
          $url = "https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip"

          try {
            Invoke-WebRequest -Uri $url -OutFile $zip -UseBasicParsing -TimeoutSec 60
            Expand-Archive -Path $zip -DestinationPath "upx" -Force
            Copy-Item -Path "upx\upx-4.2.1-win64\upx.exe" -Destination "upx.exe" -Force
            Remove-Item $zip -Force
            Write-Host "UPX descargado y copiado a .\upx.exe"
          } catch {
            Write-Error "Fallo descargando UPX: $_"
            exit 1
          }
        }

        if (Get-Command upx -ErrorAction SilentlyContinue) {
          Write-Host "UPX disponible en PATH:"
          & upx --version
        } elseif (Test-Path ".\upx.exe") {
          Write-Host "Usando .\upx.exe local"
          & .\upx.exe --version
          $env:PATH = "$PWD;$env:PATH"
        } else {
          Write-Error "UPX no est√° disponible tras ambos intentos."
          exit 1
        }

    # ------------------------
    # Install Python deps: non-Windows
    # ------------------------
    - name: Install build dependencies (pip) ‚Äî Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
        python -m pip install pyinstaller

    # ------------------------
    # Install Python deps: Windows
    # ------------------------
    - name: Install build dependencies (pip) ‚Äî Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if (Test-Path requirements.txt) {
          python -m pip install -r requirements.txt
        }
        python -m pip install pyinstaller

    - name: Verify entrypoint (main.py)
      shell: bash
      run: |
        if [ -f "main.py" ]; then
          echo "‚úÖ main.py found"
        else
          echo "‚ùå main.py not found ‚Äî aborting"
          echo "Files in repo root:"
          ls -la
          exit 1
        fi

    # ------------------------
    # Build (Unix)
    # ------------------------
    - name: Build (Linux / macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p build dist
        pyinstaller --noconfirm --clean --onefile --name "${PACKAGE_NAME}" main.py --distpath dist --workpath build/.pyinstaller --specpath build

    # ------------------------
    # Build (Windows)
    # ------------------------
    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path build,dist | Out-Null
        pyinstaller --noconfirm --clean --onefile --name "$env:PACKAGE_NAME" main.py --distpath dist --workpath build/.pyinstaller --specpath build

    # ------------------------
    # UPX compress (Unix)
    # ------------------------
    - name: Strip / UPX compress (if UPX available) ‚Äî Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        set -e
        for f in dist/*; do
          if [ -f "$f" ]; then
            chmod +x "$f" || true
            if command -v upx >/dev/null 2>&1; then
              echo "Compressing $f with upx"
              upx --best --lzma "$f" || echo "upx failed for $f"
            else
              echo "UPX not available, skipping compression"
            fi
          fi
        done

    # ------------------------
    # UPX compress (Windows)
    # ------------------------
    - name: Strip / UPX compress (if UPX available) ‚Äî Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $files = Get-ChildItem -Path dist -File -ErrorAction SilentlyContinue
        if (-not $files) { Write-Host "No files in dist/ to compress"; exit 0 }
        foreach ($f in $files) {
          $path = $f.FullName
          Write-Host "Found build artifact: $path"
          if (Get-Command upx -ErrorAction SilentlyContinue) {
            Write-Host "Compressing $path with upx (from PATH)"
            & upx --best --lzma $path || Write-Warning "upx failed for $path"
          } elseif (Test-Path ".\upx.exe") {
            Write-Host "Compressing $path with local .\upx.exe"
            & .\upx.exe --best --lzma $path || Write-Warning "upx failed for $path"
          } else {
            Write-Host "UPX not available, skipping compression"
          }
        }

    - name: Verify build output (OS-aware)
      shell: bash
      run: |
        echo "üìä Build verification"
        ls -la dist || true

        if [ "${RUNNER_OS}" = "Windows" ]; then
          powershell -Command "
            \$exes = Get-ChildItem -Path dist -Filter *.exe -File -ErrorAction SilentlyContinue
            if (-not \$exes) { Write-Error 'No .exe found in dist/'; exit 1 }
            foreach (\$e in \$exes) { Write-Host \"‚úÖ \$($e.Name) - \$($e.Length) bytes\" }
          "
        else
          if ls dist/* 1> /dev/null 2>&1; then
            for f in dist/*; do
              if [ -f \"$f\" ]; then
                size=$(stat -c%s \"$f\" 2>/dev/null || stat -f%z \"$f\" 2>/dev/null || echo "unknown")
                echo "‚úÖ $f ($size bytes)"
              fi
            done
          else
            echo "‚ùå No build artifacts in dist/"
            exit 1
          fi
        fi

    # ------------------------
    # Create zip/tar for artifacts (Unix)
    # ------------------------
    - name: Create zip of dist for artifact upload ‚Äî Unix
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p artifacts
        ZIP_NAME="artifacts/${PACKAGE_NAME}-${{ matrix.os }}-py${{ matrix.python-version }}.zip"
        zip -r "$ZIP_NAME" dist || ( echo "zip failed, trying tar.gz"; tar -czf "${ZIP_NAME%.zip}.tar.gz" dist && exit 0 )
        echo "Created $ZIP_NAME"

    # ------------------------
    # Create zip for artifacts (Windows)
    # ------------------------
    - name: Create zip of dist for artifact upload ‚Äî Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path artifacts | Out-Null
        $zip = "artifacts/${env:PACKAGE_NAME}-${{ matrix.os }}-py${{ matrix.python-version }}.zip"
        Compress-Archive -Path dist\* -DestinationPath $zip -Force
        Write-Host "Created $zip"

    # ------------------------
    # Upload artifacts (full)
    # ------------------------
    - name: Upload build artifacts (full folders + zipped executable)
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/**
          build/**
          artifacts/**
        retention-days: 30
        if-no-files-found: error

    # ------------------------
    # Upload executable only
    # ------------------------
    - name: Upload executable only
      uses: actions/upload-artifact@v4
      with:
        name: snake-executable-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/**
        retention-days: 30
        if-no-files-found: error
