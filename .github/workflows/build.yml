name: Build Snake Game

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: build-snake-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PACKAGE_NAME: snake-game
  PYINSTALLER_OPTS: --noconfirm --clean --onefile

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'
        check-latest: true

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Verify entrypoint
      run: |
        if [ ! -f "main.py" ]; then
          echo "::error::‚ùå main.py not found in repository root"
          echo "Directory contents:"
          ls -la
          exit 1
        else
          echo "‚úÖ main.py found"
        fi

    - name: Build executable
      run: |
        # Create output directories
        mkdir -p dist build artifacts

        # OS-specific executable naming
        if [ "$RUNNER_OS" = "Windows" ]; then
          OUTPUT_NAME="${PACKAGE_NAME}.exe"
        else
          OUTPUT_NAME="${PACKAGE_NAME}"
        fi

        # Build with PyInstaller
        pyinstaller $PYINSTALLER_OPTS --name "$OUTPUT_NAME" \
          --distpath dist \
          --workpath build/pyinstaller \
          --specpath build \
          main.py

        # Verify output
        if [ ! -f "dist/$OUTPUT_NAME" ]; then
          echo "::error::‚ùå Build failed - executable not found"
          echo "PyInstaller output:"
          cat build/pyinstaller/*.log || true
          exit 1
        else
          # Get file size in human-readable format
          if [ "$RUNNER_OS" = "Darwin" ]; then
            SIZE=$(stat -f%z "dist/$OUTPUT_NAME")
          else
            SIZE=$(stat -c%s "dist/$OUTPUT_NAME")
          fi
          echo "‚úÖ Build successful: dist/$OUTPUT_NAME ($SIZE bytes)"
        fi

    - name: Package artifacts
      run: |
        # OS-specific archive naming
        ARCHIVE_NAME="${PACKAGE_NAME}-${RUNNER_OS}-py${matrix.python-version}"

        # Create archive based on OS
        case "$RUNNER_OS" in
          Windows)
            7z a -tzip "artifacts/${ARCHIVE_NAME}.zip" "dist/${PACKAGE_NAME}.exe"
            ;;
          Linux|macOS)
            tar -czf "artifacts/${ARCHIVE_NAME}.tar.gz" -C dist .
            ;;
        esac

        echo "üì¶ Created archive: artifacts/${ARCHIVE_NAME}.*"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: snake-artifacts-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          dist/
          artifacts/
        retention-days: 7
        if-no-files-found: error
