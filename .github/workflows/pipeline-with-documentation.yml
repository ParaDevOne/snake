name: CI/CD Pipeline with Documentation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:  # Ejecución manual

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.7.1'

jobs:
  # Trabajo de pruebas y verificación de código
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Verify Poetry installation and project structure
      run: |
        echo "=== Poetry version ==="
        poetry --version
        echo "=== Current directory ==="
        pwd
        ls -la
        echo "=== Checking for pyproject.toml ==="
        if [ -f "pyproject.toml" ]; then
          echo "pyproject.toml exists"
          echo "=== First 20 lines of pyproject.toml ==="
          head -20 pyproject.toml
        else
          echo "ERROR: pyproject.toml not found!"
          echo "Available files:"
          ls -la
          exit 1
        fi
        echo "=== Poetry config ==="
        poetry config --list
        echo "=== Poetry check ==="
        poetry check || echo "Poetry check failed"

    - name: Load cached dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

    - name: Install dependencies
      run: |
        echo "=== Installing dependencies with Poetry ==="
        poetry install --no-interaction --verbose

    - name: Run tests with coverage
      run: poetry run pytest --cov=./ --cov-report=xml --cov-report=term-missing

    - name: Run linter
      run: poetry run flake8 . --count --show-source --statistics --max-line-length=88

    - name: Run type checking
      run: poetry run mypy . --ignore-missing-imports --show-error-codes

    - name: Upload coverage reports
      if: matrix.python-version == '3.10'  # Solo subir desde una versión
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Trabajo de construcción y seguridad
  build-and-audit:
    runs-on: ubuntu-latest
    needs: test-and-lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: false

    - name: Load cached dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --verbose

    - name: Security audit
      run: |
        poetry check
        # Instalar safety si no está en las dependencias
        pip install safety
        poetry export -f requirements.txt --without-hashes --output requirements.txt
        safety check -r requirements.txt || echo "Security check completed with warnings"

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages-${{ github.sha }}
        path: dist/
        retention-days: 30

  # Trabajo de documentación con MkDocs
  documentation:
    runs-on: ubuntu-latest
    needs: test-and-lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: false

    - name: Load cached dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-poetry-docs-${{ hashFiles('**/poetry.lock') }}

    - name: Install documentation dependencies
      run: poetry install --with docs --no-interaction --verbose

    - name: Build documentation with MkDocs
      run: poetry run mkdocs build --verbose --site-dir site

    - name: Check for broken links
      run: |
        if command -v linkchecker >/dev/null 2>&1; then
          linkchecker site/ --check-extern || echo "Link checking completed with warnings"
        else
          echo "Linkchecker not available, skipping link check"
        fi

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        keep_files: false
        force_orphan: true

    - name: Upload documentation artifact
      if: github.ref != 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: site/
        retention-days: 30

  # Trabajo de despliegue (solo para releases)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-lint, build-and-audit, documentation]
    if: github.event_name == 'release' && github.event.action == 'published'

    # Configurar permisos para poder hacer push si es necesario
    permissions:
      contents: read
      packages: write
      id-token: write  # Para trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages-${{ github.sha }}
        path: dist/

    - name: Verify artifacts
      run: |
        ls -la dist/
        if [ -z "$(ls -A dist/)" ]; then
          echo "Error: No artifacts found"
          exit 1
        fi

    - name: Publish to PyPI (Trusted Publishing)
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verify-metadata: true
        verbose: true
